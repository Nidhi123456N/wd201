<h5 class="font-semibold"><%= title %></h5>
    <ul class="list-none">
  <% for(var i = 0; i < data.length; i++) { %>
    <li class="todo-item">
      <div
        class="flex items-center w-fit my-2 px-2 py-1 rounded hover:shadow-md hover:bg-slate-700"
      >
        <input
          id="todo-checkbox-<%= data[i].id %>"
          type="checkbox"
          class="w-4 h-4 text-blue-600 rounded"
          <%=data[i].completed ? "checked" : "" %>
          onclick="updateTodo(<%= data[i].id %>)"
        />
        <label class="text-gray-300 cursor-pointer ml-2" for="todo-checkbox-<%= data[i].id %>">
          <%- data[i].title %>
        </label>
        <a href="#" class="ml-2 hidden delete-icon" 
        onclick="deleteTodo('<%= data[i].id %>')">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            class="w-4 h-4"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M20.25 7.5l-.625 10.632a2.25 2.25 0 01-2.247 2.118H6.622a2.25 2.25 0 01-2.247-2.118L3.75 7.5m6 4.125l2.25 2.25m0 0l2.25 2.25M12 13.875l2.25-2.25M12 13.875l-2.25 2.25M3.375 7.5h17.25c.621 0 1.125-.504 1.125-1.125v-1.5c0-.621-.504-1.125-1.125-1.125H3.375c-.621 0-1.125.504-1.125 1.125v1.5c0 .621.504 1.125 1.125 1.125z"
            />
          </svg>
        </a>
        
      </div>
    </li>
    <% } %>
    </ul>
.eslintignore
migrations
models
.eslintrc.json:
{
  "env": {
    "browser": true,
    "commonjs": true,
    "es2021": true,
    "jest": true

  },
  "extends": "eslint:recommended",
  "overrides": [],
  "parserOptions": {
    "ecmaVersion": "latest"
  },
  "rules": {}
}
.gitignore:
node_modules
app.js:-
const express = require("express");
const app = express();
const { Todo } = require("./models");
const bodyParser = require("body-parser");
app.use(bodyParser.json());

app.get("/", function (request, response) {
  response.send("Hello World");
});

app.get("/todos", async function (_request, response) {
  console.log("Processing list of all Todos ...");
  try {
    const todos = await Todo.findAll();
    response.send(todos);
  } catch (error) {
    console.log(error);
    return response.status(422).json(error);
  }
});

app.get("/todos/:id", async function (request, response) {
  try {
    const todo = await Todo.findByPk(request.params.id);
    return response.json(todo);
  } catch (error) {
    console.log(error);
    return response.status(422).json(error);
  }
});

app.post("/todos", async function (request, response) {
  try {
    const todo = await Todo.addTodo(request.body);
    return response.json(todo);
  } catch (error) {
    console.log(error);
    return response.status(422).json(error);
  }
});

app.put("/todos/:id/markAsCompleted", async function (request, response) {
  const todo = await Todo.findByPk(request.params.id);
  try {
    const updatedTodo = await todo.markAsCompleted();
    return response.json(updatedTodo);
  } catch (error) {
    console.log(error);
    return response.status(422).json(error);
  }
});

app.delete("/todos/:id", async function (request, response) {
  console.log("We have to delete a Todo with ID: ", request.params.id);
  try {
    // check if todo exists for given id
    let deleted = false;
    const todo = await Todo.findByPk(request.params.id);
    if (todo) {
      // Delete the todo with the given index
      await Todo.destroy({
        where: { id: request.params.id },
      });
      // Check the database any todo with given id is present
      const stillThere = await Todo.findByPk(request.params.id);
      // if todo is present, deletion failed so return false else return true
      deleted = stillThere ? false : true;
    } else {
      deleted = false;
    }
    return response.send(deleted);
  } catch (error) {
    console.log(error);
    return response.status(422).json(error);
  }
});

module.exports = app;
